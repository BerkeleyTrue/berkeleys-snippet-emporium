global !p
def last_module(mod):
	return mod.rstrip('.').rsplit('.', 1)[-1]

def space_if(p):
	return " " if p else ""
endglobal

snippet mod "Module declaration" !b
module ${1:Foo}
		( $2
		)
	where

$0
endsnippet

snippet main "Main module" !b
module Main (main) where

main :: IO ()
main = ${1:error "undefined: \`main' in `!v expand('%')`"}
endsnippet

snippet qual "Qualified import, name by last module" !b
import qualified ${1:Module} as ${2:`!p snip.rv = last_module(t[1])`}
endsnippet

snippet as "Qualified import, name by first character of last module" !b
import qualified ${1:Module} as ${2:`!p snip.rv = last_module(t[1])[0]`}
endsnippet

snippet :: "Type signature" !b
${1:name} :: ${2:Type}
endsnippet

snippet => "Class constraint" !w
${1:Class} ${2:variable} => $2
endsnippet

snippet fun "Function definition" !b
-- | ${5:Documentation for '$1'}
$1 :: ${3:Type} -> ${4:Type}
${1:name} ${2:args} = ${6:error "undefined: \`$1' in `!v expand('%')`"}
endsnippet

snippet def "Value definition" !b
-- | ${4:Documentation for $1}
$1 :: ${2:Type}
${1:name} = ${5:error "undefined: \`$1' in `!v expand('%')`"}
endsnippet

# }}} Definitions

# Expressions {{{

snippet \ "Lambda" !w
\\${1:args} -> ${2:expression}
endsnippet

snippet if "Boolean conditional" !w
if ${1:condition} then ${2:true} else ${3:false}
endsnippet

snippet case "Pattern match" !w
case ${1:scrutinee} of
	${2:pattern} -> ${3:expression}
endsnippet

snippet qq "Quasi quote" !w
[${1:quoter}|${2:content}|]
endsnippet
