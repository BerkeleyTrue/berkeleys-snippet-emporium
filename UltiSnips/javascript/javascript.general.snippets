global !p
def camelCaseToKebab(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()
endglobal

snippet import "create an import statement"
import ${2:\{ ${3} \}} from '${1}';$0
endsnippet

snippet export "create an export statement"
export ${2:\{ ${3} \}} from '${1}';$0
endsnippet

snippet require "create a require expression"
const ${2:\{ ${3} \}} = require('${1}');$0
endsnippet

snippet ()= "create arrow function"
${1:()} => ${0}
endsnippet

snippet class
class ${1:ClassName} extends ${2:SuperClass} {
	constructor(...args) {
		super(...args);
	}
}
endsnippet

snippet construct
constructor(...props) {
	super(...props);
}
endsnippet

snippet fun "create a named func" i
function ${1:foo}(${2}) {
	${0}
}
endsnippet

snippet func "create an anon func" i
function(${1}) {
	${0}
}
endsnippet

snippet log "call log"
console.log('${1}')$0
endsnippet

snippet logd "call log with debugger"
console.log('${1:${VISUAL}}: ', ${2:$1})${0}
endsnippet

snippet loge "call log with eyes"
console.eyes(${2:$1}, '${1:${VISUAL}}: ')${0}
endsnippet

snippet cosnt "remap common const mispelling"
const ${0}
endsnippet

snippet iferr "handle error first callbacks"
if (err) {
	return ${1:callback}(err);
}
${2:return $1($0);}
endsnippet
