global !p
def camelCaseToKebab(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()
endglobal

snippet import "create an import statement"
import ${2:\{ ${3} \}} from '${1}';$0
endsnippet

snippet export "create an export statement"
export ${2:\{ ${3} \}} from '${1}';$0
endsnippet

snippet require "create a require expression"
const ${2:\{ ${3} \}} = require('${1}');$0
endsnippet

snippet class
class ${1:ClassName} {
}
endsnippet

snippet subclass "Create a subclass"
class ${1:ClassName} extends ${2:SuperClass} {
	constructor() {
		super();
	}
}
endsnippet

snippet construct
constructor() {
	super();
}
endsnippet

snippet fun "create a func"
function ${1:foo}(${2}) {
	${0}
}
endsnippet

snippet afn "create an async func"
async (${1}) => {
	${0}
}
endsnippet

snippet afnc "create an async func"
async function ${1:foo}(${2}) {
	${0}
}
endsnippet

snippet fn "create arrow function"
($1) => ${0}
endsnippet

snippet log "call log"
console.log('${1}')$0
endsnippet

snippet logd "call log with debugger"
console.log('${1:${VISUAL}}: ', ${2:$1})${0}
endsnippet

snippet loge "call log with eyes"
console.eyes(${2:$1}, '${1:${VISUAL}}: ')${0}
endsnippet

snippet cosnt "remap common const mispelling"
const ${0}
endsnippet

snippet iferr "handle error first callbacks"
if (err) {
	return ${1:callback}(err);
}
${2:return $1($0);}
endsnippet
