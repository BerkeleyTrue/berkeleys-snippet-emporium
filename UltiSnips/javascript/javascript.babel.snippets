global !p
def camelCaseToKebab(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()
endglobal

snippet import
import { ${1} } from '${2}';
${0}
endsnippet

snippet importde
import ${1} from '${2:`!p snip.rv = camelCaseToKebab(t[1])`}';
${0}
endsnippet

snippet arw
${1:()} => ${0}
endsnippet

snippet meth
${1:method}() {
	${0}
}
endsnippet

snippet bindMeth
this.${1:method} = this.$1.bind(this);
endsnippet

snippet class
class ${1:ClassName} extends ${2:SuperClass} {
	constructor(...args) {
		super(...args);
	}
}
endsnippet

snippet iter
let ${1:Name} = {
	[Symbol.iterator]() {
		${1}
		return {
			next() {
				return {
					value: ${0},
					done: false
				}
			}
		}
	}
};
endsnippet

snippet gener
function* ${1:Name}() {
	yield ${0};
}
endsnippet

snippet prom
const ${1:Name} = new Promise((res, rej) => {
	${0}
});
endsnippet

snippet construct
constructor(...props) {
	super(...props);
}
endsnippet
