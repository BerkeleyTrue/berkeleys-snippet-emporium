global !p
def camelCaseToKebab(name):
	s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', name)
	return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()
endglobal

snippet funcomp "create a functional react component"
import React from 'react';
// import PropTypes from 'prop-types';

const propTypes = {};
export default function ${1:FooComponent}() {
	return (
		${0:<div>hello berks</div>}
	);
}

$1.displayName = '$1';
$1.propTypes = propTypes;
endsnippet

snippet purecomp "create a pure react component"
import React, { PureComponent } from 'react';
// import PropTypes from 'prop-types';

const propTypes = {};
export default class ${1:FooComponent} extends PureComponent {
	render() {
		return (
			${0:<div>hello berks</div>}
		);
	}
}

$1.displayName = '$1';
$1.propTypes = propTypes;
endsnippet

snippet styledfuncomp "create a pure react component using styles"
import React from 'react';
// import PropTypes from 'prop-types';
import classnames from 'classnames/bind';

import styles from './`!p snip.rv = camelCaseToKebab(t[1])`.styl';

const cx = classnames.bind(styles);
const propTypes = {};

export default function ${1:FooComponent}() {
	return (
		<${2:div} className={ cx('`!p snip.rv = camelCaseToKebab(t[1])`') }>
			${0}
		</$2>
	);
}
$1.displayName = '$1';
$1.propTypes = propTypes;
endsnippet

snippet styledpurecomp "create a pure react component using styles"
import React, { PureComponent } from 'react';
// import PropTypes from 'prop-types';
import classnames from 'classnames/bind';

import styles from './`!p snip.rv = camelCaseToKebab(t[1])`.styl';

const cx = classnames.bind(styles);
const propTypes = {};

export default class ${1:FooComponent} extends PureComponent {
	render() {
		return (
			<${2:div} className={ cx('`!p snip.rv = camelCaseToKebab(t[1])`') }>
				${0}
			</$2>
		);
	}
}
$1.displayName = '$1';
$1.propTypes = propTypes;
endsnippet

snippet conpurecomp "create a pure, connected react component"
import React, { PureComponent } from 'react';
// import PropTypes from 'prop-types';
import { connect } from 'react-redux';

const mapStateToProps = null;
const mapDispatchToProps = null;
const propTypes = {
};

export class ${1:FooComponent} extends PureComponent {
	render() {
		return (
			${0:<span />}
		);
	}
}
$1.displayName = '$1';
$1.propTypes = propTypes;

export default connect(
	mapStateToProps,
	mapDispatchToProps
)($1);
endsnippet

snippet confuncomp "create a connected react functional component"
import React from 'react';
// import PropTypes from 'prop-types';
import { connect } from 'react-redux';

const mapStateToProps = null;
const mapDispatchToProps = null;
const propTypes = {
};

export function ${1:FooComponent}() {
	return (
		${0:<span />}
	);
}
$1.displayName = '$1';
$1.propTypes = propTypes;

export default connect(
	mapStateToProps,
	mapDispatchToProps
)($1);
endsnippet

snippet cdm "componentDidMount"
componentDidMount() {
	${0}
}
endsnippet

snippet cdu "componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
	${0}
}
endsnippet

snippet cwm "componentWillMount"
componentWillMount() {
	${0}
}
endsnippet

snippet cwrp "componentWillReceiveProps"
componentWillReceiveProps(nextProps) {
	${0}
}
endsnippet

snippet cwu "componentWillUnmount"
componentWillUnmount() {
	${0}
}
endsnippet

snippet cwup "componentWillUpdate props"
componentWillUpdate(nextProps, nextState) {
	${0}
}
endsnippet

snippet gdp "getDefaultProps"
getDefaultProps: function() {
	return {
		${1}
	};
},
endsnippet

snippet sdp "defaultProps"
${1:${VISUAL:FooComponent}}.defaultProps = {
	${2}
};
endsnippet

snippet gcc "getChildContext"
getChildContext() {
	return {
		${1}
	};
};
endsnippet

snippet gis "getInitialState"
getInitialState: function() {
	return {
		${1}: ${0}
	};
},
endsnippet

snippet spt "static propTypes"
${1:${VISUAL:FooComponent}}.propTypes = {
	${2:PropName}: PropTypes.${0:string}
};
endsnippet

snippet addpt "add PropType"
${1:${VISUAL:PropName}}: PropTypes.${2:string}${0:,}
endsnippet

snippet importprop "import prop-types"
import PropTypes from 'prop-types';
endsnippet

snippet ren "component render method"
render() {
	return (
		${0:${VISUAL:null}}
	);
}
endsnippet

snippet scu "shouldComponentUpdate"
shouldComponentUpdate(nextProps, nextState) {
	${0}
}
endsnippet

snippet props "add props destruction props"
const {
	${0}
} = this.props;
endsnippet

snippet debug "import and create debugger"
import createDebugger from 'debug';

const log = createDebugger('${1:${VISUAL:namespace}}');
endsnippet

snippet display "add static displayName attr"
${1:${VISUAL:FooComponent}}.displayName = '${0:ComponentName}'
endsnippet

snippet cx "add className attr to element creation"
className='${1:foo}'
endsnippet

snippet cxs "add className to element with cx styling"
className={ cx('${1:foo}') }
endsnippet

snippet wcxs "Wrap className" i
{ cx(${1:${VISUAL:''}}) }
endsnippet

snippet attr "Create a jsx attribute"
${1:${VISUAL:prop}}={ ${2:${VISUAL:value}} }${0}
endsnippet

snippet connect "Create a connected component"
export default connect(
	${1:mapStateToProps},
	${2:mapDispatchToProps}
)(${0:${VISUAL:Component}});
endsnippet

snippet reduxmap "add blank redux map functions" b
const mapStateToProps = null;
const mapDispatchToProps = null;
endsnippet
