global !p
def camelCaseToKebab(name):
	s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', name)
	return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()
endglobal

snippet action "export action" b
export const ${1:actionName} = createAction(types.$1);$0
endsnippet

snippet gns "getNS fun" b
const getNS = state => state[ns];
endsnippet

snippet selector "export selector" b
export const ${1:stateName}Selector = state => ${2:getNS(state)}.${3:$1};$0
endsnippet

snippet selector_ "export lodash selector" b
export const ${1:stateName}Selector = _.get([ns, '${2:$1}'$0]);
endsnippet

snippet connect "Create a connected component"
export default connect(
	mapStateToProps,
	mapDispatchToProps,
)(${0:${VISUAL:Component}});
endsnippet

snippet reduxmap "add blank redux map functions" b
const mapStateToProps = null;
const mapDispatchToProps = null;
endsnippet

snippet mergeProps "create a react-redux connect mergeProps func" b
const mergeProps = (stateProps, dispatchProps, ownProps) => ({
	...stateProps,
	...dispatchProps,
	...ownProps,$0
});
endsnippet

snippet styledconnectedfuncomp "create a pure react component using styles"
import React from 'react';
import { connect } from 'react-redux';
// import PropTypes from 'prop-types';
import classnames from 'classnames/bind';
// import { createSelector } from 'reselect';

import styles from './`!p snip.rv = camelCaseToKebab(t[1])`.${3:module.styl}';

const cx = classnames.bind(styles);

const mapStateToProps = null;
const mapDispatchToProps = {};

const propTypes = {};

/** @component */
export function ${1:FooComponent}() {
	return (
		<${2:div} className={ cx('`!p snip.rv = camelCaseToKebab(t[1])`') }>
			${0}
		</$2>
	);
}

$1.displayName = '$1';
$1.propTypes = propTypes;

export default connect(
	mapStateToProps,
	mapDispatchToProps,
)($1);
endsnippet
